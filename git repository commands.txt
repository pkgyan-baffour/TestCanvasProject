#Constantly updating list of config and setup commands

#Start of setup

	#Your Username and Email Address
	git config --global user.name "<Your Name>"
	git config --global user.email "<Your Email>"


	#Necessary core setup
	git config --global core.autocrlf false
	git config --global core.safecrlf true


	#Setting up the proxy
	#Only needed on Uni computers
	git config --global http.proxy http://proxy.uclan.ac.uk:3128


	#Storing your username and password
	#After adding this, push as usual, it will ask for your username and password
	#Next time it will not ask for your details
	git config credential.helper store


	#Reduce push error, setting a default for pushing
	git config --global push.default simple


	#For mac users
	#Globally ignoring .DS_Store files
	git config --global core.excludesfile ~/.gitignore
	echo .DS_Store >> ~/.gitignore

#End of setup


#Start of basic repository commands

	#Setup a new repository linked to a remote repository on the command line
	#NOTE: These commands will be revisited below, this is just a basic starting off point.
	echo "<Content>" >> README.md
	git init
	git add "README.md"
	git commit -m "<Commit Message>"
	git remote add "<repository name>" <url>
	git push -u <repository name/url> master

	#if you get an non-fas t-forward error
	git push --force <remote_repository>
	
	#Create an alias for a remote repository (GitHub, BitBucket etc.)
	#Use this alias instead of the url on push for ease
	git remote add "<repository name>" <url>


	#Initialise a folder as a repository
	git init


	#Create files and add content to them (good for simple set up with a readme file)
	echo "<Content>" >> README.md


	#Find out the status of your working copy (if you have any file changes to commit)
	git status


	#Adding Files to the staging area ready for a commit
	#Add a specific file
	git add "<File Name>"

	#Add all files
	git add *

	#Adding deleted files
	git add -u


	#Committing changes to the local repository
	git commit -m "<Commit Message>"


	#Pushing files to the remote repository
	git push -u <repository name/url> <branch>


	#Fetch changes for a remote repository (Find out if there is anything to pull)
	git fetch <branch>

	#Fetch changes for all branches
	git fetch --all


	#Pulling changes from the remote repository
	git pull <repository name/url> <branch>

#End of basic repository commands


#Start of intermediate repository commands

	#Lists files that your repository is currently tracking
	git ls-files

	#Find out who made changes to a specific file
	git blame <fileName>


	#Displays entire commit history for the repository
	git log


	#Duplicate current branch into a new branch
	git branch <New branch name> <Branch to duplicate>


	#Checkout
	#Move to a different branch
	git checkout <branch>

	#Pull from your local directory, useful for when you make an error, delete a file for example
	git checkout “<filename>”

	#Or for checking out all files
	git checkout -- .

	#If you have a branch that is the same name as a file you are trying to checkout
	git checkout -- "<filename>"


	#Creating a remote repository (Could be useful in an office setting using an external, cloud-backed-up drive)
	git init --bare


	#Merge a branch with another branch
	#NOTE: Make sure you are in the branch you want to be merged into (e.g. master)
	git merge <Name of branch>
	#The name of the branch will be the branch to merge into your current branch e.g. develop


	#Stash uncommitted changes for later use
	git stash

	#Re-apply previously stashed changes
	git stash apply

	#Drop stashed changes
	git stash drop

#End of intermediate repository commands

#Extra Notes
	#This would be a useful way to organise your branches
	#Allows for features, releases and hotfixes
	http://danielkummer.github.io/git-flow-cheatsheet/

#Soon to come
	#Rebase
	#Revert
	#Reset
	#Archive
